The ``0-add_integer`` module
============================

Using ``add_integer``
-------------------

>>> add_integer = __import__('0-add_integer').add_integer

>> add_integer(0, 0)
0

>>> add_integer(1, 2)
3

>>> add_integer(1, -2)
-1

>>> add_integer(-1, 2)
1

>>> add_integer(-1, -2)
-3

>>> add_integer(1, 2.4)
3

>>> add_integer(1.4, 2)
3

>>> add_integer(50.2, 50.2)
100

>>> add_integer(999999999, 1)
1000000000

>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer("Björk", 2)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer("Björk", 2)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(1, "Bowie")
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer( , 2)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> add_integer([1], 2)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(1, [2])
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(2, float("inf"))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

import math
>>> add_integer(2, float("nan"))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(1, None)
Traceback (most recent call last):
...
TypeError: b must be an integer

>>> add_integer(None, 2)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(1, 2, 3)
Traceback (most recent call last):
...
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given